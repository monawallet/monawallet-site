{
  "_args": [
    [
      {
        "raw": "css-hot-loader@^1.3.7",
        "scope": null,
        "escapedName": "css-hot-loader",
        "name": "css-hot-loader",
        "rawSpec": "^1.3.7",
        "spec": ">=1.3.7 <2.0.0",
        "type": "range"
      },
      "/Users/user/WebService/8chan.github.io/node_modules/nuxt"
    ]
  ],
  "_from": "css-hot-loader@>=1.3.7 <2.0.0",
  "_id": "css-hot-loader@1.4.1",
  "_inCache": true,
  "_location": "/css-hot-loader",
  "_nodeVersion": "8.11.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/css-hot-loader_1.4.1_1532571277127_0.21891967331591977"
  },
  "_npmUser": {
    "name": "shepherdwind",
    "email": "eward.song@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "css-hot-loader@^1.3.7",
    "scope": null,
    "escapedName": "css-hot-loader",
    "name": "css-hot-loader",
    "rawSpec": "^1.3.7",
    "spec": ">=1.3.7 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/nuxt"
  ],
  "_resolved": "https://registry.npmjs.org/css-hot-loader/-/css-hot-loader-1.4.1.tgz",
  "_shasum": "d6d4425aa7f65744f1bb60a70e6f7673dd660546",
  "_shrinkwrap": null,
  "_spec": "css-hot-loader@^1.3.7",
  "_where": "/Users/user/WebService/8chan.github.io/node_modules/nuxt",
  "author": {
    "name": "shepherdwind"
  },
  "bugs": {
    "url": "https://github.com/shepherdwind/css-hot-loader/issues"
  },
  "dependencies": {
    "loader-utils": "^1.1.0",
    "lodash": "^4.17.5",
    "normalize-url": "^1.9.1"
  },
  "description": "css hot reload work with extract-text-webpack-plugin",
  "devDependencies": {
    "coveralls": "^2.13.1",
    "jest": "^20.0.4",
    "strict-uri-encode": "^2.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-lYvAaRS/zhEqq110KiVXtKWdKeIyBi0eCaPhqHAHySF+BpmccO9xhuJ5tf8pSQj4aFqsnkrXXzFfv1Ilg5V9fg==",
    "shasum": "d6d4425aa7f65744f1bb60a70e6f7673dd660546",
    "tarball": "https://registry.npmjs.org/css-hot-loader/-/css-hot-loader-1.4.1.tgz",
    "fileCount": 7,
    "unpackedSize": 12134,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbWS6NCRA9TVsSAnZWagAAxDoP/iy0BQdWCbJm/D99Cnwg\n4djq4DxAyaAbal60+55gGTL/ZkWyHnuvb40XGK4xBDhJlALigGNwVHqEsAcH\nsPumg4t6AAPbitoyaq8fu94p9NejjCQfO/3MY7raDmmcpDJ3vvUvoW86tZak\n8NYB1NL8WOW5VEd6UOAfNqv+5DhfxSGnbzxfWaCmmyVUNuzjdVmXNi91+Llw\nG6K3ywH60vphPjzqPfEdTHmV4/yHqL5LPOhvEamNOuKiFT42YhXoyx41dnTB\n7u5dtzR3jEx1APCmoqdEZh9CgHWYWCEWGJfSj8iDAHXQIG/fFrIiqx7Gtt6d\nNoQ4ipl7yT9zodUQTNJPksEfLBm2U9NcUaLi3WF3ut5anfaZSDTfD4iYxrW2\nO2UWTAfJJyzf+djhIdnVZpjvilHOFZrYAHifSCGsPetZ1BxHLHk/GKuM0nID\nVkAtxjgkAruoXphfuidx9G21G7dADTxrMkjhzBta5XQ0RYKw/IAImktMkJQR\nTnagASMJVc8o0GXFRaauhGBDPDJmDfyeRKKP+z+Yyx7co5DQoaG83/kFWMxM\nxZUurhZfu7XG0lKBhv1Ey0lSnuXwMJLSzBk/TS8+Gf9Ccy71UHZMtM9QMp6v\nUJwzSre2i7A81a/0RyQSr749b4bU556hEGzzP3MjTwzILCg2jvAQtm9q41Ks\n2+1w\r\n=ugzP\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "loader.js",
    "hotModuleReplacement.js",
    "index.js"
  ],
  "gitHead": "2dbc7cc94733f63520ddf2928d1b7bce74ba1715",
  "homepage": "http://git.shepherdwind.com/css-hot-loader/",
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "shepherdwind",
      "email": "eward.song@gmail.com"
    }
  ],
  "name": "css-hot-loader",
  "optionalDependencies": {},
  "readme": "### CSS Hot Loader\n\n[![build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![NPM version][npm-image]][npm-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: http://img.shields.io/npm/v/css-hot-loader.svg?style=flat-square\n[npm-url]: http://npmjs.org/package/css-hot-loader\n[download-image]: https://img.shields.io/npm/dm/css-hot-loader.svg?style=flat-square\n[download-url]: https://npmjs.org/package/css-hot-loader\n[travis-image]: https://img.shields.io/travis/shepherdwind/css-hot-loader.svg?style=flat-square\n[travis-url]: https://travis-ci.org/shepherdwind/css-hot-loader\n[coveralls-image]: https://img.shields.io/coveralls/shepherdwind/css-hot-loader.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/shepherdwind/css-hot-loader?branch=master\n\nThis is a css hot loader, which support hot module replacement for an extracted css file.\n\n### Why we need css hot loader\n\nIn most cases, we can realize css hot reload by [style-loader](https://github.com/webpack/style-loader) . But style-loader need inject style tag into document, Before js ready, the web page will have no any style. That is not good experience.\n\nAlso, a lots of people thought about that, How can realize hot reload with\nextract-text-webpack-plugin. For example [#30](https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/30) , [#!89](https://github.com/webpack-contrib/extract-text-webpack-plugin/pull/89).\n\nSo I wrote this loader, which supports hot module replacement for an extracted css file.\n\n### Install\n\nFirst install package from npm\n\n```sh\n$ npm install css-hot-loader --save-dev\n```\n\nThen config webpack.config.js\n\n```javascript\nmodule: {\n  rules: [\n    {\n      test: /\\.css$/,\n      use: ['css-hot-loader'].concat(ExtractTextPlugin.extract({\n        fallback: 'style-loader',\n        use: 'css-loader'\n      })),\n    },\n  ]\n}\n```\n\n`css-hot-loader` should be the first loader before `extract-text-webpack-plugin`.\n\n### Attention\n\nThis plugin require the output css file name static. If output file name depend\non css content, for example `'bundle.[name].[contenthash].css'`, HMR reload will\nfail, more detail refer to [#21](https://github.com/shepherdwind/css-hot-loader/issues/21).\n\n### webpack 4\n\nThere is an issue to work with webpack4 [#37](https://github.com/shepherdwind/css-hot-loader/issues/37).\nPlease use [mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin) to replace extract-text-webpack-plugin.\nConfig like this:\n\n```javascript\nmodule: {\n  rules: [\n    {\n      test: /\\.css/,\n      use: [\n        'css-hot-loader',\n        MiniCssExtractPlugin.loader,\n        'css-loader',\n      ],\n    },\n  ] // end rules\n},\n```\n\n### webpack 1.x\n\nConfig file example should like this\n\n```javascript\n  module: {\n    loaders: [{\n      test: /\\.less$/,\n      loaders: [\n        'css-hot-loader',\n        'extract-text-webpack-plugin',\n        'less',\n        ...\n       ],\n      include: path.join(__dirname, 'src')\n    }]\n  }\n```\n\n### options\n\n#### fileMap\n\nOption to define you css file reload rule. Since 1.1.0 .\n\nFor example `'css-hot-loader?fileMap='../css/{fileName}'` , which mean\n\n```\njs/foo.js => css/foo.css\n```\n\nDefault value is `{fileName}`.\n\nsee [#3](https://github.com/shepherdwind/css-hot-loader/issues/3).\n\n#### reloadAll\n\nForce reload all css file.\n\n### How\n\n\nThe realization principle of this loader is very simple. There are some assumed condition:\n\n1. css required by js , so css also be a js file\n2. The name of css file, which need hot reload , is the same as js file excuted.\n\nThe secend assumption is often established. If you use extract-text-webpack-plugin , entry `foo.js` will extract css file `foo.css`. This principle will help us to locate the url of css file extracted.\n\nBecause every css file will be a js module , every css file change can affect a module change. CSS hot loader will accept this kind change, then find extracted css file by `document.currentScript`.\n\nSo when a css file changed, We just need find which css file link element, and reload css file.\n\n### License\n\n(The MIT License)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/shepherdwind/css-hot-loader.git"
  },
  "scripts": {
    "ci": "npm run cov && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
    "cov": "jest --collectCoverageFrom='[\"*.js\"]' --coverage",
    "pub": "npm version patch && npm publish && git push origin && git push origin --tags",
    "test": "jest"
  },
  "version": "1.4.1"
}
