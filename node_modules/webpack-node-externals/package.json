{
  "_args": [
    [
      {
        "raw": "webpack-node-externals@^1.6.0",
        "scope": null,
        "escapedName": "webpack-node-externals",
        "name": "webpack-node-externals",
        "rawSpec": "^1.6.0",
        "spec": ">=1.6.0 <2.0.0",
        "type": "range"
      },
      "/Users/user/WebService/8chan.github.io/node_modules/nuxt"
    ]
  ],
  "_from": "webpack-node-externals@>=1.6.0 <2.0.0",
  "_id": "webpack-node-externals@1.7.2",
  "_inCache": true,
  "_location": "/webpack-node-externals",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/webpack-node-externals_1.7.2_1522618820540_0.7509305932514607"
  },
  "_npmUser": {
    "name": "liady",
    "email": "liadydev@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "webpack-node-externals@^1.6.0",
    "scope": null,
    "escapedName": "webpack-node-externals",
    "name": "webpack-node-externals",
    "rawSpec": "^1.6.0",
    "spec": ">=1.6.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/nuxt"
  ],
  "_resolved": "https://registry.npmjs.org/webpack-node-externals/-/webpack-node-externals-1.7.2.tgz",
  "_shasum": "6e1ee79ac67c070402ba700ef033a9b8d52ac4e3",
  "_shrinkwrap": null,
  "_spec": "webpack-node-externals@^1.6.0",
  "_where": "/Users/user/WebService/8chan.github.io/node_modules/nuxt",
  "author": {
    "name": "Liad Yosef",
    "url": "https://github.com/liady"
  },
  "bugs": {
    "url": "https://github.com/liady/webpack-node-externals/issues"
  },
  "dependencies": {},
  "description": "Easily exclude node_modules in Webpack bundle",
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^2.5.3",
    "mock-fs": "^4.4.2",
    "ncp": "^2.0.0",
    "webpack": "^1.13.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ajerHZ+BJKeCLviLUUmnyd5B4RavLF76uv3cs6KNuO8W+HuQaEs0y0L7o40NQxdPy5w0pcv8Ew7yPUAQG0UdCg==",
    "shasum": "6e1ee79ac67c070402ba700ef033a9b8d52ac4e3",
    "tarball": "https://registry.npmjs.org/webpack-node-externals/-/webpack-node-externals-1.7.2.tgz",
    "fileCount": 5,
    "unpackedSize": 12530
  },
  "files": [
    "LICENSE",
    "README.md",
    "index.js",
    "utils.js"
  ],
  "gitHead": "cfa1c5b33752fb8cb72360167ae89b23816cdefe",
  "homepage": "https://github.com/liady/webpack-node-externals",
  "keywords": [
    "webpack",
    "node_modules",
    "node",
    "bundle",
    "externals"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "liady",
      "email": "liadydev@gmail.com"
    }
  ],
  "name": "webpack-node-externals",
  "optionalDependencies": {},
  "readme": "Webpack node modules externals\r\n==============================\r\n> Easily exclude node modules in Webpack\r\n\r\n[![Version](https://img.shields.io/npm/v/webpack-node-externals.svg)](https://www.npmjs.org/package/webpack-node-externals)\r\n[![Downloads](https://img.shields.io/npm/dm/webpack-node-externals.svg)](https://www.npmjs.org/package/webpack-node-externals)\r\n[![Build Status](https://travis-ci.org/liady/webpack-node-externals.svg?branch=master)](https://travis-ci.org/liady/webpack-node-externals)\r\n\r\nWebpack allows you to define [*externals*](https://webpack.js.org/configuration/externals) - modules that should not be bundled.\r\n\r\nWhen bundling with Webpack for the backend - you usually don't want to bundle its `node_modules` dependencies.\r\nThis library creates an *externals* function that ignores `node_modules` when bundling in Webpack.<br/>(Inspired by the great [Backend apps with Webpack](http://jlongster.com/Backend-Apps-with-Webpack--Part-I) series)\r\n\r\n## Quick usage\r\n```sh\r\nnpm install webpack-node-externals --save-dev\r\n```\r\n\r\nIn your `webpack.config.js`:\r\n```js\r\nvar nodeExternals = require('webpack-node-externals');\r\n...\r\nmodule.exports = {\r\n    ...\r\n    target: 'node', // in order to ignore built-in modules like path, fs, etc.\r\n    externals: [nodeExternals()], // in order to ignore all modules in node_modules folder\r\n    ...\r\n};\r\n```\r\nAnd that's it. All node modules will no longer be bundled but will be left as `require('module')`.\r\n\r\n## Detailed overview\r\n### Description\r\nThis library scans the `node_modules` folder for all node_modules names, and builds an *externals* function that tells Webpack not to bundle those modules, or any sub-modules of theirs.\r\n\r\n### Configuration\r\nThis library accepts an `options` object.\r\n\r\n#### `options.whitelist (=[])`\r\nAn array for the `externals` to whitelist, so they **will** be included in the bundle. Can accept exact strings (`'module_name'`), regex patterns (`/^module_name/`), or a function that accepts the module name and returns whether it should be included.\r\n<br/>**Important** - if you have set aliases in your webpack config with the exact same names as modules in *node_modules*, you need to whitelist them so Webpack will know they should be bundled.\r\n\r\n#### `options.importType (='commonjs')`\r\nThe method in which unbundled modules will be required in the code. Best to leave as `commonjs` for node modules.\r\nMay be one of [documented options](https://webpack.js.org/configuration/externals/#externals) or function `callback(moduleName)` which returns custom code to be returned as import type, e.g:\r\n```js\r\noptions.importType = function (moduleName) {\r\n    return 'amd ' + moduleName;\r\n}\r\n```\r\n\r\n#### `options.modulesDir (='node_modules')`\r\nThe folder in which to search for the node modules.\r\n\r\n#### `options.modulesFromFile (=false)`\r\nRead the modules from the `package.json` file instead of the `node_modules` folder.\r\n<br/>Accepts a boolean or a configuration object:\r\n```js\r\n{\r\n    modulesFromFile: true,\r\n    /* or */\r\n    modulesFromFile: {\r\n        exclude: [/* sections to exclude, i.e 'devDependencies' */],\r\n        include: [/* sections to explicitly include, i.e only 'dependencies' */]\r\n    }\r\n}\r\n```\r\n\r\n## Usage example\r\n```js\r\nvar nodeExternals = require('webpack-node-externals');\r\n...\r\nmodule.exports = {\r\n    ...\r\n    target: 'node', // important in order not to bundle built-in modules like path, fs, etc.\r\n    externals: [nodeExternals({\r\n        // this WILL include `jquery` and `webpack/hot/dev-server` in the bundle, as well as `lodash/*`\r\n        whitelist: ['jquery', 'webpack/hot/dev-server', /^lodash/]\r\n    })],\r\n    ...\r\n};\r\n```\r\n    \r\nFor most use cases, the defaults of `importType` and `modulesDir` should be used.\r\n\r\n## Q&A\r\n#### Why not just use a regex in the Webpack config?\r\nWebpack allows inserting [regex](https://webpack.js.org/configuration/externals/#regex) in the *externals* array, to capture non-relative modules:\r\n```js\r\n{\r\n    externals: [\r\n        // Every non-relative module is external\r\n        // abc -> require(\"abc\")\r\n        /^[a-z\\-0-9]+$/\r\n    ]\r\n}\r\n```\r\nHowever, this will leave unbundled **all non-relative requires**, so it does not account for aliases that may be defined in webpack itself.\r\nThis library scans the `node_modules` folder, so it only leaves unbundled the actual node modules that are being used.\r\n\r\n#### How can I bundle required assets (i.e css files) from node_modules?\r\nUsing the `whitelist` option, this is possible. We can simply tell Webpack to bundle all files with extensions that are not js/jsx/json, using this [regex](https://regexper.com/#%5C.(%3F!(%3F%3Ajs%7Cjson)%24).%7B1%2C5%7D%24):\r\n```js\r\n...\r\nnodeExternals({\r\n  // load non-javascript files with extensions, presumably via loaders\r\n  whitelist: [/\\.(?!(?:jsx?|json)$).{1,5}$/i],\r\n}),\r\n...\r\n```\r\nThanks @wmertens for this idea.\r\n\r\n#### Why is not bundling node_modules a good thing?\r\n\r\nWhen writing a node library, for instance, you may want to split your code to several files, and use Webpack to bundle them. However - you wouldn't want to bundle your code with its entire node_modules dependencies, for two reasons:\r\n\r\n1. It will bloat your library on npm.\r\n2. It goes against the entire npm dependencies management. If you're using Lodash, and the consumer of your library also has the same Lodash dependency, npm makes sure that it will be added only once. But bundling Lodash in your library will actually make it included twice, since npm is no longer managing this dependency.\r\n\r\nAs a consumer of a library, I want the library code to include only its logic, and just state its dependencies so they could me merged/resolved with the rest of the dependencies in my project. Bundling your code with your dependencies makes it virtually impossible.\r\n\r\nIn short: **It's useful if your code is used by something that has dependencies managed by npm**\r\n\r\n## Contribute\r\nContributions and pull requests are welcome. Please run the tests to make sure nothing breaks.\r\n### Test\r\n```sh\r\nnpm run test\r\n```\r\n\r\n## License\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/liady/webpack-node-externals.git"
  },
  "scripts": {
    "test": "npm run unit-watch",
    "unit": "mocha --colors ./test/*.spec.js",
    "unit-watch": "mocha --colors -w ./test/*.spec.js"
  },
  "version": "1.7.2"
}
