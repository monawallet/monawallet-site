{
  "_args": [
    [
      {
        "raw": "style-resources-loader@^1.0.0",
        "scope": null,
        "escapedName": "style-resources-loader",
        "name": "style-resources-loader",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/user/WebService/8chan.github.io/node_modules/nuxt"
    ]
  ],
  "_from": "style-resources-loader@>=1.0.0 <2.0.0",
  "_id": "style-resources-loader@1.1.0",
  "_inCache": true,
  "_location": "/style-resources-loader",
  "_nodeVersion": "9.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/style-resources-loader_1.1.0_1519807023971_0.7891933017676604"
  },
  "_npmUser": {
    "name": "yenshih",
    "email": "yenshih95@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "style-resources-loader@^1.0.0",
    "scope": null,
    "escapedName": "style-resources-loader",
    "name": "style-resources-loader",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/nuxt"
  ],
  "_resolved": "https://registry.npmjs.org/style-resources-loader/-/style-resources-loader-1.1.0.tgz",
  "_shasum": "492f4f6ab0052c207148fd808acbdd83e79a9231",
  "_shrinkwrap": null,
  "_spec": "style-resources-loader@^1.0.0",
  "_where": "/Users/user/WebService/8chan.github.io/node_modules/nuxt",
  "authors": [
    "Shi Yan <yenshih95@gmail.com> (https://github.com/yenshih)"
  ],
  "browserify": {
    "transform": [
      "loose-envify"
    ]
  },
  "bugs": {
    "url": "https://github.com/yenshih/style-resources-loader/issues"
  },
  "dependencies": {
    "glob": "^7.1.2",
    "loader-utils": "^1.1.0"
  },
  "description": "CSS preprocessor resources loader for webpack",
  "devDependencies": {
    "@types/glob": "^5.0.35",
    "@types/jest": "^22.1.3",
    "@types/loader-utils": "^1.1.2",
    "@types/node": "^9.4.6",
    "@types/webpack": "^3.8.8",
    "@types/webpack-merge": "^4.1.2",
    "coveralls": "^3.0.0",
    "cross-env": "^5.1.3",
    "jest": "^22.4.2",
    "raw-loader": "^0.5.1",
    "ts-jest": "^22.4.0",
    "tslint": "^5.9.1",
    "tslint-config-airbnb": "^5.7.0",
    "typescript": "^2.7.2",
    "webpack": "^3.11.0",
    "webpack-merge": "^4.1.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-9baA+SLZc6qtCiJd/IfHHEfrqyhHdB7s57XljncQte4hS8qC1fQP+SDroAksh8wMtSS6KXQ0CG9CPD7lwokiGA==",
    "shasum": "492f4f6ab0052c207148fd808acbdd83e79a9231",
    "tarball": "https://registry.npmjs.org/style-resources-loader/-/style-resources-loader-1.1.0.tgz",
    "fileCount": 49,
    "unpackedSize": 35106
  },
  "engines": {
    "node": ">=7.6"
  },
  "files": [
    "lib",
    "src",
    "index.d.ts"
  ],
  "gitHead": "f7aa3be362f2d5fbc6fef696a50c9f03e582be90",
  "homepage": "https://github.com/yenshih/style-resources-loader#readme",
  "jest": {
    "transform": {
      ".(ts|tsx)": "./node_modules/ts-jest/preprocessor.js"
    },
    "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js"
    ],
    "coveragePathIgnorePatterns": [
      "node_modules",
      "test",
      "src"
    ]
  },
  "keywords": [
    "webpack",
    "loader",
    "style",
    "sass",
    "scss",
    "less",
    "stylus",
    "inject",
    "resource",
    "variable",
    "mixin"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "yenshih",
      "email": "yenshih95@gmail.com"
    }
  ],
  "name": "style-resources-loader",
  "npmName": "style-resources-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^2.0.0 || >= 3.0.0-rc.0 || ^3.0.0"
  },
  "readme": "[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![downloads][downloads]][downloads-url]\n[![build][build]][build-url]\n[![coverage][coverage]][coverage-url]\n\n<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img\n        width=\"200\"\n        height=\"200\"\n        src=\"https://webpack.js.org/assets/icon-square-big.svg\"\n    >\n  </a>\n  <h1>Style Resources Loader</h1>\n  <p>CSS preprocessor resources loader for webpack.</p>\n</div>\n\n\n<h2 align=\"center\">Install</h2>\n\n```bash\nnpm i style-resources-loader -D\n```\n\n<h2 align=\"center\">Usage</h2>\n\nThis loader is a CSS preprocessor resources loader for webpack, which injects your style resources (e.g. `variables / mixins`) into multiple imported `sass / scss / less / stylus` modules.\n\nIt's mainly used to\n - share your `variables / mixins / functions` across all style files, so you don't need to `@import` them manually.\n - override `variables` in style files provided by other libraries (e.g. [ant-design](https://github.com/ant-design/ant-design)) and customize your own theme.\n\n<h2 align=\"center\">Examples</h2>\n\nPrepends `variables` and `mixins` to all `scss` files with default resources injector.\n\n**webpack.config.js**\n``` js\nmodule.exports = {\n    // ...\n    module: {\n        rules: [{\n            test: /\\.scss$/,\n            use: ['style-loader', 'css-loader', 'sass-loader', {\n                loader: 'style-resources-loader',\n                options: {\n                    patterns: [\n                        path.resolve(__dirname, 'path/to/scss/variables/*.scss'),\n                        path.resolve(__dirname, 'path/to/scss/mixins/*.scss'),\n                    ]\n                }\n            }]\n        }]\n    }\n}\n```\n\nAppends `variables` to all `less` files and override original `less variables`.\n\n**webpack.config.js**\n```js\nmodule.exports = {\n    // ...\n    module: {\n        rules: [{\n            test: /\\.less$/,\n            use: ['style-loader', 'css-loader', 'less-loader', {\n                loader: 'style-resources-loader',\n                options: {\n                    patterns: path.resolve(__dirname, 'path/to/less/variables/*.less'),\n                    injector: 'append'\n                }\n            }]\n        }]\n    }\n}\n```\n\nAppends `mixins` and prepends `variables` to all `stylus` files with customized resources injector.\n\n**webpack.config.js**\n``` js\nmodule.exports = {\n    // ...\n    module: {\n        rules: [{\n            test: /\\.styl$/,\n            use: ['style-loader', 'css-loader', 'stylus-loader', {\n                loader: 'style-resources-loader',\n                options: {\n                    patterns: [\n                        path.resolve(__dirname, 'path/to/stylus/variables/*.styl'),\n                        path.resolve(__dirname, 'path/to/stylus/mixins/*.styl')\n                    ],\n                    injector: (source, resources) => {\n                        const combineAll = (type) => resources\n                            .filter(({ file }) => file.includes(type))\n                            .map(({ content }) => content)\n                            .join('');\n                        return combineAll('mixins') + source + combineAll('variables');\n                    }\n                }\n            }]\n        }]\n    }\n}\n```\n\n<h2 align=\"center\">Options</h2>\n\n|Name|Type|Default|Description|\n|:--:|:--:|:-----:|:----------|\n|**[`patterns`](#patterns)**|`{String \\| String[]}`|`/`|Path to the resources you would like to inject|\n|**[`injector`](#injector)**|`{Function \\| 'prepend' \\| 'append'}`|`prepend`|Controls the resources injection precisely|\n|**[`globOptions`](#globoptions)**|`{Object}`|`{}`|An options that can be passed to `glob(...)`|\n|**[`resolveUrl`](#resolveurl)**|`{Boolean}`|`true`|Enable/Disable `@import` url to be resolved|\n\n### `patterns`\n\nA string or an array of string, represents the path to the resources you would like to inject.\n\nIt supports [globbing](https://github.com/isaacs/node-glob). You could include many files using a file mask.\n\nFor example, `path.resolve(__dirname, './styles/*/*.less')` would include all `less` files from `variables` and `mixins` directories and ignore `reset.less` in such following structure.\n\n```\n./styles\n  /variables\n    |-- fonts.less\n    |-- colors.less\n  /mixins\n    |-- size.less\n  |-- reset.less\n```\n\n### `injector`\n\nAn optional function which controls the resources injection precisely. It also supports `prepend` and `append` for convenience.\n\nIt defaults to `prepend` (equivalent to `(source, resources) => resources.map(({ content }) => content).join('') + source` internally), which means the loader prepends all resources to source file.\n\nAn injector function receives two parameters:\n\n|Name|Type|Default|Description|\n|:--:|:--:|:-----:|:----------|\n|**`source`**|`{String}`|`/`|Content of the source file|\n|**[`resources`](#resources)**|`{Object[]}`|`/`|Resource descriptors|\n\n#### `resources`\n\nAn array of resource, each contains `file` and `content` property:\n\n|Name|Type|Default|Description|\n|:--:|:--:|:-----:|:----------|\n|**`file`**|`{String}`|`/`|Absolute path to the resource|\n|**`content`**|`{String}`|`/`|Content of the resource file|\n\n### `globOptions`\n\nAn options that can be passed to `glob(...)`. See [node-glob options](https://github.com/isaacs/node-glob#options) for more details.\n\n### `resolveUrl`\n\nA boolean which defaults to `true`. It represents whether the relative path in `@import` or `@require` statements should be resolved.\n\nIf you were to use `@import` or `@require` statements in style resource file, you should make sure that the url is relative to that resource file, rather than the source file.\n\nYou could disable this feature by setting `resolveUrl` to `false`.\n\n<h2 align=\"center\">License</h2>\n\n[MIT](http://www.opensource.org/licenses/mit-license.php)\n\n[npm]: https://img.shields.io/npm/v/style-resources-loader.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/style-resources-loader\n[node]: https://img.shields.io/node/v/style-resources-loader.svg\n[node-url]: https://nodejs.org\n[downloads]: https://img.shields.io/npm/dm/style-resources-loader.svg?style=flat-square\n[downloads-url]: https://www.npmjs.com/package/style-resources-loader\n[build]: https://img.shields.io/travis/yenshih/style-resources-loader/master.svg?style=flat-square\n[build-url]: https://travis-ci.org/yenshih/style-resources-loader\n[coverage]: https://img.shields.io/coveralls/yenshih/style-resources-loader/master.svg?style=flat\n[coverage-url]: https://coveralls.io/github/yenshih/style-resources-loader?branch=master\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yenshih/style-resources-loader.git"
  },
  "scripts": {
    "build": "tsc --outDir lib -d",
    "clean": "rimraf lib coverage",
    "lint": "tslint -p .",
    "posttest": "rimraf test/**/outputs",
    "prepare": "npm run clean && npm run lint && npm run build && npm run test",
    "start": "tsc --outDir lib -w",
    "test": "jest --colors",
    "test:coverage": "npm test -- --coverage"
  },
  "version": "1.1.0"
}
